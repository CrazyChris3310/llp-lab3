// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "resp_schema.hxx"

// column_t
// 

const column_t::name_type& column_t::
name () const
{
  return this->name_.get ();
}

column_t::name_type& column_t::
name ()
{
  return this->name_.get ();
}

void column_t::
name (const name_type& x)
{
  this->name_.set (x);
}

void column_t::
name (::std::unique_ptr< name_type > x)
{
  this->name_.set (std::move (x));
}

const column_t::type_type& column_t::
type () const
{
  return this->type_.get ();
}

column_t::type_type& column_t::
type ()
{
  return this->type_.get ();
}

void column_t::
type (const type_type& x)
{
  this->type_.set (x);
}

void column_t::
type (::std::unique_ptr< type_type > x)
{
  this->type_.set (std::move (x));
}


// header_t
// 

const header_t::table_type& header_t::
table () const
{
  return this->table_.get ();
}

header_t::table_type& header_t::
table ()
{
  return this->table_.get ();
}

void header_t::
table (const table_type& x)
{
  this->table_.set (x);
}

void header_t::
table (::std::unique_ptr< table_type > x)
{
  this->table_.set (std::move (x));
}

const header_t::column_sequence& header_t::
column () const
{
  return this->column_;
}

header_t::column_sequence& header_t::
column ()
{
  return this->column_;
}

void header_t::
column (const column_sequence& s)
{
  this->column_ = s;
}


// body_t
// 

const body_t::column_type& body_t::
column () const
{
  return this->column_.get ();
}

body_t::column_type& body_t::
column ()
{
  return this->column_.get ();
}

void body_t::
column (const column_type& x)
{
  this->column_.set (x);
}

void body_t::
column (::std::unique_ptr< column_type > x)
{
  this->column_.set (std::move (x));
}

const body_t::value_type& body_t::
value () const
{
  return this->value_.get ();
}

body_t::value_type& body_t::
value ()
{
  return this->value_.get ();
}

void body_t::
value (const value_type& x)
{
  this->value_.set (x);
}

void body_t::
value (::std::unique_ptr< value_type > x)
{
  this->value_.set (std::move (x));
}


// response_t
// 

const response_t::status_type& response_t::
status () const
{
  return this->status_.get ();
}

response_t::status_type& response_t::
status ()
{
  return this->status_.get ();
}

void response_t::
status (const status_type& x)
{
  this->status_.set (x);
}

void response_t::
status (::std::unique_ptr< status_type > x)
{
  this->status_.set (std::move (x));
}

const response_t::message_type& response_t::
message () const
{
  return this->message_.get ();
}

response_t::message_type& response_t::
message ()
{
  return this->message_.get ();
}

void response_t::
message (const message_type& x)
{
  this->message_.set (x);
}

void response_t::
message (::std::unique_ptr< message_type > x)
{
  this->message_.set (std::move (x));
}

const response_t::header_optional& response_t::
header () const
{
  return this->header_;
}

response_t::header_optional& response_t::
header ()
{
  return this->header_;
}

void response_t::
header (const header_type& x)
{
  this->header_.set (x);
}

void response_t::
header (const header_optional& x)
{
  this->header_ = x;
}

void response_t::
header (::std::unique_ptr< header_type > x)
{
  this->header_.set (std::move (x));
}

const response_t::body_optional& response_t::
body () const
{
  return this->body_;
}

response_t::body_optional& response_t::
body ()
{
  return this->body_;
}

void response_t::
body (const body_type& x)
{
  this->body_.set (x);
}

void response_t::
body (const body_optional& x)
{
  this->body_ = x;
}

void response_t::
body (::std::unique_ptr< body_type > x)
{
  this->body_.set (std::move (x));
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// column_t
//

column_t::
column_t (const name_type& name,
          const type_type& type)
: ::xml_schema::type (),
  name_ (name, this),
  type_ (type, this)
{
}

column_t::
column_t (const column_t& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  name_ (x.name_, f, this),
  type_ (x.type_, f, this)
{
}

column_t::
column_t (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  name_ (this),
  type_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void column_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // name
    //
    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< name_type > r (
        name_traits::create (i, f, this));

      if (!name_.present ())
      {
        this->name_.set (::std::move (r));
        continue;
      }
    }

    // type
    //
    if (n.name () == "type" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< type_type > r (
        type_traits::create (i, f, this));

      if (!type_.present ())
      {
        this->type_.set (::std::move (r));
        continue;
      }
    }

    break;
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "name",
      "");
  }

  if (!type_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "type",
      "");
  }
}

column_t* column_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class column_t (*this, f, c);
}

column_t& column_t::
operator= (const column_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->name_ = x.name_;
    this->type_ = x.type_;
  }

  return *this;
}

column_t::
~column_t ()
{
}

// header_t
//

header_t::
header_t (const table_type& table)
: ::xml_schema::type (),
  table_ (table, this),
  column_ (this)
{
}

header_t::
header_t (const header_t& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  table_ (x.table_, f, this),
  column_ (x.column_, f, this)
{
}

header_t::
header_t (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  table_ (this),
  column_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void header_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // table
    //
    if (n.name () == "table" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< table_type > r (
        table_traits::create (i, f, this));

      if (!table_.present ())
      {
        this->table_.set (::std::move (r));
        continue;
      }
    }

    // column
    //
    if (n.name () == "column" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< column_type > r (
        column_traits::create (i, f, this));

      this->column_.push_back (::std::move (r));
      continue;
    }

    break;
  }

  if (!table_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "table",
      "");
  }
}

header_t* header_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class header_t (*this, f, c);
}

header_t& header_t::
operator= (const header_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->table_ = x.table_;
    this->column_ = x.column_;
  }

  return *this;
}

header_t::
~header_t ()
{
}

// body_t
//

body_t::
body_t (const column_type& column,
        const value_type& value)
: ::xml_schema::type (),
  column_ (column, this),
  value_ (value, this)
{
}

body_t::
body_t (const body_t& x,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  column_ (x.column_, f, this),
  value_ (x.value_, f, this)
{
}

body_t::
body_t (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  column_ (this),
  value_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void body_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // column
    //
    if (n.name () == "column" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< column_type > r (
        column_traits::create (i, f, this));

      if (!column_.present ())
      {
        this->column_.set (::std::move (r));
        continue;
      }
    }

    // value
    //
    if (n.name () == "value" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< value_type > r (
        value_traits::create (i, f, this));

      if (!value_.present ())
      {
        this->value_.set (::std::move (r));
        continue;
      }
    }

    break;
  }

  if (!column_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "column",
      "");
  }

  if (!value_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "value",
      "");
  }
}

body_t* body_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class body_t (*this, f, c);
}

body_t& body_t::
operator= (const body_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->column_ = x.column_;
    this->value_ = x.value_;
  }

  return *this;
}

body_t::
~body_t ()
{
}

// response_t
//

response_t::
response_t (const status_type& status,
            const message_type& message)
: ::xml_schema::type (),
  status_ (status, this),
  message_ (message, this),
  header_ (this),
  body_ (this)
{
}

response_t::
response_t (const response_t& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  status_ (x.status_, f, this),
  message_ (x.message_, f, this),
  header_ (x.header_, f, this),
  body_ (x.body_, f, this)
{
}

response_t::
response_t (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  status_ (this),
  message_ (this),
  header_ (this),
  body_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void response_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // status
    //
    if (n.name () == "status" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< status_type > r (
        status_traits::create (i, f, this));

      if (!status_.present ())
      {
        this->status_.set (::std::move (r));
        continue;
      }
    }

    // message
    //
    if (n.name () == "message" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< message_type > r (
        message_traits::create (i, f, this));

      if (!message_.present ())
      {
        this->message_.set (::std::move (r));
        continue;
      }
    }

    // header
    //
    if (n.name () == "header" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< header_type > r (
        header_traits::create (i, f, this));

      if (!this->header_)
      {
        this->header_.set (::std::move (r));
        continue;
      }
    }

    // body
    //
    if (n.name () == "body" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< body_type > r (
        body_traits::create (i, f, this));

      if (!this->body_)
      {
        this->body_.set (::std::move (r));
        continue;
      }
    }

    break;
  }

  if (!status_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "status",
      "");
  }

  if (!message_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "message",
      "");
  }
}

response_t* response_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class response_t (*this, f, c);
}

response_t& response_t::
operator= (const response_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->status_ = x.status_;
    this->message_ = x.message_;
    this->header_ = x.header_;
    this->body_ = x.body_;
  }

  return *this;
}

response_t::
~response_t ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

void
operator<< (::xercesc::DOMElement& e, const column_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // name
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "name",
        e));

    s << i.name ();
  }

  // type
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "type",
        e));

    s << i.type ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const header_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // table
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "table",
        e));

    s << i.table ();
  }

  // column
  //
  for (header_t::column_const_iterator
       b (i.column ().begin ()), n (i.column ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "column",
        e));

    s << *b;
  }
}

void
operator<< (::xercesc::DOMElement& e, const body_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // column
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "column",
        e));

    s << i.column ();
  }

  // value
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "value",
        e));

    s << i.value ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const response_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // status
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "status",
        e));

    s << i.status ();
  }

  // message
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "message",
        e));

    s << i.message ();
  }

  // header
  //
  if (i.header ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "header",
        e));

    s << *i.header ();
  }

  // body
  //
  if (i.body ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "body",
        e));

    s << *i.body ();
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

