// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "resp_schema.hxx"

// column_t
// 

const column_t::id_type& column_t::
id () const
{
  return this->id_.get ();
}

column_t::id_type& column_t::
id ()
{
  return this->id_.get ();
}

void column_t::
id (const id_type& x)
{
  this->id_.set (x);
}

const column_t::name_type& column_t::
name () const
{
  return this->name_.get ();
}

column_t::name_type& column_t::
name ()
{
  return this->name_.get ();
}

void column_t::
name (const name_type& x)
{
  this->name_.set (x);
}

void column_t::
name (::std::unique_ptr< name_type > x)
{
  this->name_.set (std::move (x));
}

const column_t::type_type& column_t::
type () const
{
  return this->type_.get ();
}

column_t::type_type& column_t::
type ()
{
  return this->type_.get ();
}

void column_t::
type (const type_type& x)
{
  this->type_.set (x);
}

void column_t::
type (::std::unique_ptr< type_type > x)
{
  this->type_.set (std::move (x));
}

const column_t::len_type& column_t::
len () const
{
  return this->len_.get ();
}

column_t::len_type& column_t::
len ()
{
  return this->len_.get ();
}

void column_t::
len (const len_type& x)
{
  this->len_.set (x);
}


// header_t
// 

const header_t::col_amount_type& header_t::
col_amount () const
{
  return this->col_amount_.get ();
}

header_t::col_amount_type& header_t::
col_amount ()
{
  return this->col_amount_.get ();
}

void header_t::
col_amount (const col_amount_type& x)
{
  this->col_amount_.set (x);
}

const header_t::column_sequence& header_t::
column () const
{
  return this->column_;
}

header_t::column_sequence& header_t::
column ()
{
  return this->column_;
}

void header_t::
column (const column_sequence& s)
{
  this->column_ = s;
}


// data_column_t
// 

const data_column_t::value_type& data_column_t::
value () const
{
  return this->value_.get ();
}

data_column_t::value_type& data_column_t::
value ()
{
  return this->value_.get ();
}

void data_column_t::
value (const value_type& x)
{
  this->value_.set (x);
}

void data_column_t::
value (::std::unique_ptr< value_type > x)
{
  this->value_.set (std::move (x));
}

const data_column_t::col_id_type& data_column_t::
col_id () const
{
  return this->col_id_.get ();
}

data_column_t::col_id_type& data_column_t::
col_id ()
{
  return this->col_id_.get ();
}

void data_column_t::
col_id (const col_id_type& x)
{
  this->col_id_.set (x);
}


// row_t
// 

const row_t::row_sequence& row_t::
row () const
{
  return this->row_;
}

row_t::row_sequence& row_t::
row ()
{
  return this->row_;
}

void row_t::
row (const row_sequence& s)
{
  this->row_ = s;
}


// body_t
// 

const body_t::row_sequence& body_t::
row () const
{
  return this->row_;
}

body_t::row_sequence& body_t::
row ()
{
  return this->row_;
}

void body_t::
row (const row_sequence& s)
{
  this->row_ = s;
}


// response_t
// 

const response_t::status_type& response_t::
status () const
{
  return this->status_.get ();
}

response_t::status_type& response_t::
status ()
{
  return this->status_.get ();
}

void response_t::
status (const status_type& x)
{
  this->status_.set (x);
}

const response_t::message_type& response_t::
message () const
{
  return this->message_.get ();
}

response_t::message_type& response_t::
message ()
{
  return this->message_.get ();
}

void response_t::
message (const message_type& x)
{
  this->message_.set (x);
}

void response_t::
message (::std::unique_ptr< message_type > x)
{
  this->message_.set (std::move (x));
}

const response_t::finished_type& response_t::
finished () const
{
  return this->finished_.get ();
}

response_t::finished_type& response_t::
finished ()
{
  return this->finished_.get ();
}

void response_t::
finished (const finished_type& x)
{
  this->finished_.set (x);
}

const response_t::header_optional& response_t::
header () const
{
  return this->header_;
}

response_t::header_optional& response_t::
header ()
{
  return this->header_;
}

void response_t::
header (const header_type& x)
{
  this->header_.set (x);
}

void response_t::
header (const header_optional& x)
{
  this->header_ = x;
}

void response_t::
header (::std::unique_ptr< header_type > x)
{
  this->header_.set (std::move (x));
}

const response_t::body_optional& response_t::
body () const
{
  return this->body_;
}

response_t::body_optional& response_t::
body ()
{
  return this->body_;
}

void response_t::
body (const body_type& x)
{
  this->body_.set (x);
}

void response_t::
body (const body_optional& x)
{
  this->body_ = x;
}

void response_t::
body (::std::unique_ptr< body_type > x)
{
  this->body_.set (std::move (x));
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// column_t
//

column_t::
column_t (const id_type& id,
          const name_type& name,
          const type_type& type,
          const len_type& len)
: ::xml_schema::type (),
  id_ (id, this),
  name_ (name, this),
  type_ (type, this),
  len_ (len, this)
{
}

column_t::
column_t (const column_t& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  id_ (x.id_, f, this),
  name_ (x.name_, f, this),
  type_ (x.type_, f, this),
  len_ (x.len_, f, this)
{
}

column_t::
column_t (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  id_ (this),
  name_ (this),
  type_ (this),
  len_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void column_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // id
    //
    if (n.name () == "id" && n.namespace_ ().empty ())
    {
      if (!id_.present ())
      {
        this->id_.set (id_traits::create (i, f, this));
        continue;
      }
    }

    // name
    //
    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< name_type > r (
        name_traits::create (i, f, this));

      if (!name_.present ())
      {
        this->name_.set (::std::move (r));
        continue;
      }
    }

    // type
    //
    if (n.name () == "type" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< type_type > r (
        type_traits::create (i, f, this));

      if (!type_.present ())
      {
        this->type_.set (::std::move (r));
        continue;
      }
    }

    // len
    //
    if (n.name () == "len" && n.namespace_ ().empty ())
    {
      if (!len_.present ())
      {
        this->len_.set (len_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!id_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "id",
      "");
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "name",
      "");
  }

  if (!type_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "type",
      "");
  }

  if (!len_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "len",
      "");
  }
}

column_t* column_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class column_t (*this, f, c);
}

column_t& column_t::
operator= (const column_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->id_ = x.id_;
    this->name_ = x.name_;
    this->type_ = x.type_;
    this->len_ = x.len_;
  }

  return *this;
}

column_t::
~column_t ()
{
}

// header_t
//

header_t::
header_t (const col_amount_type& col_amount)
: ::xml_schema::type (),
  col_amount_ (col_amount, this),
  column_ (this)
{
}

header_t::
header_t (const header_t& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  col_amount_ (x.col_amount_, f, this),
  column_ (x.column_, f, this)
{
}

header_t::
header_t (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  col_amount_ (this),
  column_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void header_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // col_amount
    //
    if (n.name () == "col_amount" && n.namespace_ ().empty ())
    {
      if (!col_amount_.present ())
      {
        this->col_amount_.set (col_amount_traits::create (i, f, this));
        continue;
      }
    }

    // column
    //
    if (n.name () == "column" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< column_type > r (
        column_traits::create (i, f, this));

      this->column_.push_back (::std::move (r));
      continue;
    }

    break;
  }

  if (!col_amount_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "col_amount",
      "");
  }
}

header_t* header_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class header_t (*this, f, c);
}

header_t& header_t::
operator= (const header_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->col_amount_ = x.col_amount_;
    this->column_ = x.column_;
  }

  return *this;
}

header_t::
~header_t ()
{
}

// data_column_t
//

data_column_t::
data_column_t (const value_type& value,
               const col_id_type& col_id)
: ::xml_schema::type (),
  value_ (value, this),
  col_id_ (col_id, this)
{
}

data_column_t::
data_column_t (const data_column_t& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  value_ (x.value_, f, this),
  col_id_ (x.col_id_, f, this)
{
}

data_column_t::
data_column_t (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  value_ (this),
  col_id_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void data_column_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // value
    //
    if (n.name () == "value" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< value_type > r (
        value_traits::create (i, f, this));

      if (!value_.present ())
      {
        this->value_.set (::std::move (r));
        continue;
      }
    }

    // col_id
    //
    if (n.name () == "col_id" && n.namespace_ ().empty ())
    {
      if (!col_id_.present ())
      {
        this->col_id_.set (col_id_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!value_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "value",
      "");
  }

  if (!col_id_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "col_id",
      "");
  }
}

data_column_t* data_column_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class data_column_t (*this, f, c);
}

data_column_t& data_column_t::
operator= (const data_column_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->value_ = x.value_;
    this->col_id_ = x.col_id_;
  }

  return *this;
}

data_column_t::
~data_column_t ()
{
}

// row_t
//

row_t::
row_t ()
: ::xml_schema::type (),
  row_ (this)
{
}

row_t::
row_t (const row_t& x,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  row_ (x.row_, f, this)
{
}

row_t::
row_t (const ::xercesc::DOMElement& e,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  row_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void row_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // row
    //
    if (n.name () == "row" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< row_type > r (
        row_traits::create (i, f, this));

      this->row_.push_back (::std::move (r));
      continue;
    }

    break;
  }
}

row_t* row_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class row_t (*this, f, c);
}

row_t& row_t::
operator= (const row_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->row_ = x.row_;
  }

  return *this;
}

row_t::
~row_t ()
{
}

// body_t
//

body_t::
body_t ()
: ::xml_schema::type (),
  row_ (this)
{
}

body_t::
body_t (const body_t& x,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  row_ (x.row_, f, this)
{
}

body_t::
body_t (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  row_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void body_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // row
    //
    if (n.name () == "row" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< row_type > r (
        row_traits::create (i, f, this));

      this->row_.push_back (::std::move (r));
      continue;
    }

    break;
  }
}

body_t* body_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class body_t (*this, f, c);
}

body_t& body_t::
operator= (const body_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->row_ = x.row_;
  }

  return *this;
}

body_t::
~body_t ()
{
}

// response_t
//

response_t::
response_t (const status_type& status,
            const message_type& message,
            const finished_type& finished)
: ::xml_schema::type (),
  status_ (status, this),
  message_ (message, this),
  finished_ (finished, this),
  header_ (this),
  body_ (this)
{
}

response_t::
response_t (const response_t& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  status_ (x.status_, f, this),
  message_ (x.message_, f, this),
  finished_ (x.finished_, f, this),
  header_ (x.header_, f, this),
  body_ (x.body_, f, this)
{
}

response_t::
response_t (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  status_ (this),
  message_ (this),
  finished_ (this),
  header_ (this),
  body_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void response_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // status
    //
    if (n.name () == "status" && n.namespace_ ().empty ())
    {
      if (!status_.present ())
      {
        this->status_.set (status_traits::create (i, f, this));
        continue;
      }
    }

    // message
    //
    if (n.name () == "message" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< message_type > r (
        message_traits::create (i, f, this));

      if (!message_.present ())
      {
        this->message_.set (::std::move (r));
        continue;
      }
    }

    // finished
    //
    if (n.name () == "finished" && n.namespace_ ().empty ())
    {
      if (!finished_.present ())
      {
        this->finished_.set (finished_traits::create (i, f, this));
        continue;
      }
    }

    // header
    //
    if (n.name () == "header" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< header_type > r (
        header_traits::create (i, f, this));

      if (!this->header_)
      {
        this->header_.set (::std::move (r));
        continue;
      }
    }

    // body
    //
    if (n.name () == "body" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< body_type > r (
        body_traits::create (i, f, this));

      if (!this->body_)
      {
        this->body_.set (::std::move (r));
        continue;
      }
    }

    break;
  }

  if (!status_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "status",
      "");
  }

  if (!message_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "message",
      "");
  }

  if (!finished_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "finished",
      "");
  }
}

response_t* response_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class response_t (*this, f, c);
}

response_t& response_t::
operator= (const response_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->status_ = x.status_;
    this->message_ = x.message_;
    this->finished_ = x.finished_;
    this->header_ = x.header_;
    this->body_ = x.body_;
  }

  return *this;
}

response_t::
~response_t ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::unique_ptr< ::response_t >
response (const ::std::string& u,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::response_t > (
    ::response (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::response_t >
response (const ::std::string& u,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::response_t > (
    ::response (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::response_t >
response (const ::std::string& u,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::response_t > (
    ::response (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::response_t >
response (::std::istream& is,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::response (isrc, f, p);
}

::std::unique_ptr< ::response_t >
response (::std::istream& is,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::response (isrc, h, f, p);
}

::std::unique_ptr< ::response_t >
response (::std::istream& is,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::response (isrc, h, f, p);
}

::std::unique_ptr< ::response_t >
response (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::response (isrc, f, p);
}

::std::unique_ptr< ::response_t >
response (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::response (isrc, h, f, p);
}

::std::unique_ptr< ::response_t >
response (::std::istream& is,
          const ::std::string& sid,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::response (isrc, h, f, p);
}

::std::unique_ptr< ::response_t >
response (::xercesc::InputSource& i,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::response_t > (
    ::response (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::response_t >
response (::xercesc::InputSource& i,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::response_t > (
    ::response (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::response_t >
response (::xercesc::InputSource& i,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::response_t > (
    ::response (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::response_t >
response (const ::xercesc::DOMDocument& doc,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::unique_ptr< ::response_t > (
      ::response (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "response" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::response_t > r (
      ::xsd::cxx::tree::traits< ::response_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "response",
    "");
}

::std::unique_ptr< ::response_t >
response (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
          ::xml_schema::flags f,
          const ::xml_schema::properties&)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "response" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::response_t > r (
      ::xsd::cxx::tree::traits< ::response_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "response",
    "");
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

void
operator<< (::xercesc::DOMElement& e, const column_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // id
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "id",
        e));

    s << i.id ();
  }

  // name
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "name",
        e));

    s << i.name ();
  }

  // type
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "type",
        e));

    s << i.type ();
  }

  // len
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "len",
        e));

    s << i.len ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const header_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // col_amount
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "col_amount",
        e));

    s << i.col_amount ();
  }

  // column
  //
  for (header_t::column_const_iterator
       b (i.column ().begin ()), n (i.column ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "column",
        e));

    s << *b;
  }
}

void
operator<< (::xercesc::DOMElement& e, const data_column_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // value
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "value",
        e));

    s << i.value ();
  }

  // col_id
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "col_id",
        e));

    s << i.col_id ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const row_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // row
  //
  for (row_t::row_const_iterator
       b (i.row ().begin ()), n (i.row ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "row",
        e));

    s << *b;
  }
}

void
operator<< (::xercesc::DOMElement& e, const body_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // row
  //
  for (body_t::row_const_iterator
       b (i.row ().begin ()), n (i.row ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "row",
        e));

    s << *b;
  }
}

void
operator<< (::xercesc::DOMElement& e, const response_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // status
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "status",
        e));

    s << i.status ();
  }

  // message
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "message",
        e));

    s << i.message ();
  }

  // finished
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "finished",
        e));

    s << i.finished ();
  }

  // header
  //
  if (i.header ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "header",
        e));

    s << *i.header ();
  }

  // body
  //
  if (i.body ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "body",
        e));

    s << *i.body ();
  }
}

void
response (::std::ostream& o,
          const ::response_t& s,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::response (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
response (::std::ostream& o,
          const ::response_t& s,
          ::xml_schema::error_handler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::response (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
response (::std::ostream& o,
          const ::response_t& s,
          ::xercesc::DOMErrorHandler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::response (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
response (::xercesc::XMLFormatTarget& t,
          const ::response_t& s,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::response (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
response (::xercesc::XMLFormatTarget& t,
          const ::response_t& s,
          ::xml_schema::error_handler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::response (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
response (::xercesc::XMLFormatTarget& t,
          const ::response_t& s,
          ::xercesc::DOMErrorHandler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::response (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
response (::xercesc::DOMDocument& d,
          const ::response_t& s,
          ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "response" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "response",
      "");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
response (const ::response_t& s,
          const ::xml_schema::namespace_infomap& m,
          ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "response",
      "",
      m, f));

  ::response (*d, s, f);
  return d;
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

