// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "req_schema.hxx"

// constant_t
// 

const constant_t::type_type& constant_t::
type () const
{
  return this->type_.get ();
}

constant_t::type_type& constant_t::
type ()
{
  return this->type_.get ();
}

void constant_t::
type (const type_type& x)
{
  this->type_.set (x);
}

void constant_t::
type (::std::unique_ptr< type_type > x)
{
  this->type_.set (std::move (x));
}

const constant_t::value_type& constant_t::
value () const
{
  return this->value_.get ();
}

constant_t::value_type& constant_t::
value ()
{
  return this->value_.get ();
}

void constant_t::
value (const value_type& x)
{
  this->value_.set (x);
}

void constant_t::
value (::std::unique_ptr< value_type > x)
{
  this->value_.set (std::move (x));
}


// condition_t
// 

const condition_t::operator_type& condition_t::
operator_ () const
{
  return this->operator__.get ();
}

condition_t::operator_type& condition_t::
operator_ ()
{
  return this->operator__.get ();
}

void condition_t::
operator_ (const operator_type& x)
{
  this->operator__.set (x);
}

void condition_t::
operator_ (::std::unique_ptr< operator_type > x)
{
  this->operator__.set (std::move (x));
}

const condition_t::field_type& condition_t::
field () const
{
  return this->field_.get ();
}

condition_t::field_type& condition_t::
field ()
{
  return this->field_.get ();
}

void condition_t::
field (const field_type& x)
{
  this->field_.set (x);
}

void condition_t::
field (::std::unique_ptr< field_type > x)
{
  this->field_.set (std::move (x));
}

const condition_t::constant_type& condition_t::
constant () const
{
  return this->constant_.get ();
}

condition_t::constant_type& condition_t::
constant ()
{
  return this->constant_.get ();
}

void condition_t::
constant (const constant_type& x)
{
  this->constant_.set (x);
}

void condition_t::
constant (::std::unique_ptr< constant_type > x)
{
  this->constant_.set (std::move (x));
}


// predicate_t
// 

const predicate_t::condition_sequence& predicate_t::
condition () const
{
  return this->condition_;
}

predicate_t::condition_sequence& predicate_t::
condition ()
{
  return this->condition_;
}

void predicate_t::
condition (const condition_sequence& s)
{
  this->condition_ = s;
}


// ret_val_t
// 

const ret_val_t::constant_optional& ret_val_t::
constant () const
{
  return this->constant_;
}

ret_val_t::constant_optional& ret_val_t::
constant ()
{
  return this->constant_;
}

void ret_val_t::
constant (const constant_type& x)
{
  this->constant_.set (x);
}

void ret_val_t::
constant (const constant_optional& x)
{
  this->constant_ = x;
}

void ret_val_t::
constant (::std::unique_ptr< constant_type > x)
{
  this->constant_.set (std::move (x));
}

const ret_val_t::map_optional& ret_val_t::
map () const
{
  return this->map_;
}

ret_val_t::map_optional& ret_val_t::
map ()
{
  return this->map_;
}

void ret_val_t::
map (const map_type& x)
{
  this->map_.set (x);
}

void ret_val_t::
map (const map_optional& x)
{
  this->map_ = x;
}

void ret_val_t::
map (::std::unique_ptr< map_type > x)
{
  this->map_.set (std::move (x));
}


// select_t
// 

const select_t::table_sequence& select_t::
table () const
{
  return this->table_;
}

select_t::table_sequence& select_t::
table ()
{
  return this->table_;
}

void select_t::
table (const table_sequence& s)
{
  this->table_ = s;
}

const select_t::predicate_optional& select_t::
predicate () const
{
  return this->predicate_;
}

select_t::predicate_optional& select_t::
predicate ()
{
  return this->predicate_;
}

void select_t::
predicate (const predicate_type& x)
{
  this->predicate_.set (x);
}

void select_t::
predicate (const predicate_optional& x)
{
  this->predicate_ = x;
}

void select_t::
predicate (::std::unique_ptr< predicate_type > x)
{
  this->predicate_.set (std::move (x));
}


// map_t
// 

const map_t::entry_sequence& map_t::
entry () const
{
  return this->entry_;
}

map_t::entry_sequence& map_t::
entry ()
{
  return this->entry_;
}

void map_t::
entry (const entry_sequence& s)
{
  this->entry_ = s;
}


// insert_t
// 

const insert_t::into_type& insert_t::
into () const
{
  return this->into_.get ();
}

insert_t::into_type& insert_t::
into ()
{
  return this->into_.get ();
}

void insert_t::
into (const into_type& x)
{
  this->into_.set (x);
}

void insert_t::
into (::std::unique_ptr< into_type > x)
{
  this->into_.set (std::move (x));
}

const insert_t::values_type& insert_t::
values () const
{
  return this->values_.get ();
}

insert_t::values_type& insert_t::
values ()
{
  return this->values_.get ();
}

void insert_t::
values (const values_type& x)
{
  this->values_.set (x);
}

void insert_t::
values (::std::unique_ptr< values_type > x)
{
  this->values_.set (std::move (x));
}


// delete_t
// 

const delete_t::from_type& delete_t::
from () const
{
  return this->from_.get ();
}

delete_t::from_type& delete_t::
from ()
{
  return this->from_.get ();
}

void delete_t::
from (const from_type& x)
{
  this->from_.set (x);
}

void delete_t::
from (::std::unique_ptr< from_type > x)
{
  this->from_.set (std::move (x));
}

const delete_t::predicate_optional& delete_t::
predicate () const
{
  return this->predicate_;
}

delete_t::predicate_optional& delete_t::
predicate ()
{
  return this->predicate_;
}

void delete_t::
predicate (const predicate_type& x)
{
  this->predicate_.set (x);
}

void delete_t::
predicate (const predicate_optional& x)
{
  this->predicate_ = x;
}

void delete_t::
predicate (::std::unique_ptr< predicate_type > x)
{
  this->predicate_.set (std::move (x));
}


// update_t
// 

const update_t::table_type& update_t::
table () const
{
  return this->table_.get ();
}

update_t::table_type& update_t::
table ()
{
  return this->table_.get ();
}

void update_t::
table (const table_type& x)
{
  this->table_.set (x);
}

void update_t::
table (::std::unique_ptr< table_type > x)
{
  this->table_.set (std::move (x));
}

const update_t::fields_type& update_t::
fields () const
{
  return this->fields_.get ();
}

update_t::fields_type& update_t::
fields ()
{
  return this->fields_.get ();
}

void update_t::
fields (const fields_type& x)
{
  this->fields_.set (x);
}

void update_t::
fields (::std::unique_ptr< fields_type > x)
{
  this->fields_.set (std::move (x));
}

const update_t::predicate_optional& update_t::
predicate () const
{
  return this->predicate_;
}

update_t::predicate_optional& update_t::
predicate ()
{
  return this->predicate_;
}

void update_t::
predicate (const predicate_type& x)
{
  this->predicate_.set (x);
}

void update_t::
predicate (const predicate_optional& x)
{
  this->predicate_ = x;
}

void update_t::
predicate (::std::unique_ptr< predicate_type > x)
{
  this->predicate_.set (std::move (x));
}


// create_t
// 

const create_t::table_type& create_t::
table () const
{
  return this->table_.get ();
}

create_t::table_type& create_t::
table ()
{
  return this->table_.get ();
}

void create_t::
table (const table_type& x)
{
  this->table_.set (x);
}

void create_t::
table (::std::unique_ptr< table_type > x)
{
  this->table_.set (std::move (x));
}

const create_t::fields_type& create_t::
fields () const
{
  return this->fields_.get ();
}

create_t::fields_type& create_t::
fields ()
{
  return this->fields_.get ();
}

void create_t::
fields (const fields_type& x)
{
  this->fields_.set (x);
}

void create_t::
fields (::std::unique_ptr< fields_type > x)
{
  this->fields_.set (std::move (x));
}


// drop_t
// 

const drop_t::table_type& drop_t::
table () const
{
  return this->table_.get ();
}

drop_t::table_type& drop_t::
table ()
{
  return this->table_.get ();
}

void drop_t::
table (const table_type& x)
{
  this->table_.set (x);
}

void drop_t::
table (::std::unique_ptr< table_type > x)
{
  this->table_.set (std::move (x));
}


// request_t
// 

const request_t::type_type& request_t::
type () const
{
  return this->type_.get ();
}

request_t::type_type& request_t::
type ()
{
  return this->type_.get ();
}

void request_t::
type (const type_type& x)
{
  this->type_.set (x);
}

void request_t::
type (::std::unique_ptr< type_type > x)
{
  this->type_.set (std::move (x));
}

const request_t::select_optional& request_t::
select () const
{
  return this->select_;
}

request_t::select_optional& request_t::
select ()
{
  return this->select_;
}

void request_t::
select (const select_type& x)
{
  this->select_.set (x);
}

void request_t::
select (const select_optional& x)
{
  this->select_ = x;
}

void request_t::
select (::std::unique_ptr< select_type > x)
{
  this->select_.set (std::move (x));
}

const request_t::delete_optional& request_t::
delete_ () const
{
  return this->delete__;
}

request_t::delete_optional& request_t::
delete_ ()
{
  return this->delete__;
}

void request_t::
delete_ (const delete_type& x)
{
  this->delete__.set (x);
}

void request_t::
delete_ (const delete_optional& x)
{
  this->delete__ = x;
}

void request_t::
delete_ (::std::unique_ptr< delete_type > x)
{
  this->delete__.set (std::move (x));
}

const request_t::insert_optional& request_t::
insert () const
{
  return this->insert_;
}

request_t::insert_optional& request_t::
insert ()
{
  return this->insert_;
}

void request_t::
insert (const insert_type& x)
{
  this->insert_.set (x);
}

void request_t::
insert (const insert_optional& x)
{
  this->insert_ = x;
}

void request_t::
insert (::std::unique_ptr< insert_type > x)
{
  this->insert_.set (std::move (x));
}

const request_t::create_optional& request_t::
create () const
{
  return this->create_;
}

request_t::create_optional& request_t::
create ()
{
  return this->create_;
}

void request_t::
create (const create_type& x)
{
  this->create_.set (x);
}

void request_t::
create (const create_optional& x)
{
  this->create_ = x;
}

void request_t::
create (::std::unique_ptr< create_type > x)
{
  this->create_.set (std::move (x));
}

const request_t::update_optional& request_t::
update () const
{
  return this->update_;
}

request_t::update_optional& request_t::
update ()
{
  return this->update_;
}

void request_t::
update (const update_type& x)
{
  this->update_.set (x);
}

void request_t::
update (const update_optional& x)
{
  this->update_ = x;
}

void request_t::
update (::std::unique_ptr< update_type > x)
{
  this->update_.set (std::move (x));
}

const request_t::drop_optional& request_t::
drop () const
{
  return this->drop_;
}

request_t::drop_optional& request_t::
drop ()
{
  return this->drop_;
}

void request_t::
drop (const drop_type& x)
{
  this->drop_.set (x);
}

void request_t::
drop (const drop_optional& x)
{
  this->drop_ = x;
}

void request_t::
drop (::std::unique_ptr< drop_type > x)
{
  this->drop_.set (std::move (x));
}


// message_t
// 

const message_t::connect_type& message_t::
connect () const
{
  return this->connect_.get ();
}

message_t::connect_type& message_t::
connect ()
{
  return this->connect_.get ();
}

void message_t::
connect (const connect_type& x)
{
  this->connect_.set (x);
}

const message_t::database_optional& message_t::
database () const
{
  return this->database_;
}

message_t::database_optional& message_t::
database ()
{
  return this->database_;
}

void message_t::
database (const database_type& x)
{
  this->database_.set (x);
}

void message_t::
database (const database_optional& x)
{
  this->database_ = x;
}

void message_t::
database (::std::unique_ptr< database_type > x)
{
  this->database_.set (std::move (x));
}

const message_t::request_optional& message_t::
request () const
{
  return this->request_;
}

message_t::request_optional& message_t::
request ()
{
  return this->request_;
}

void message_t::
request (const request_type& x)
{
  this->request_.set (x);
}

void message_t::
request (const request_optional& x)
{
  this->request_ = x;
}

void message_t::
request (::std::unique_ptr< request_type > x)
{
  this->request_.set (std::move (x));
}


// entry
// 

const entry::key_type& entry::
key () const
{
  return this->key_.get ();
}

entry::key_type& entry::
key ()
{
  return this->key_.get ();
}

void entry::
key (const key_type& x)
{
  this->key_.set (x);
}

void entry::
key (::std::unique_ptr< key_type > x)
{
  this->key_.set (std::move (x));
}

const entry::value_type& entry::
value () const
{
  return this->value_.get ();
}

entry::value_type& entry::
value ()
{
  return this->value_.get ();
}

void entry::
value (const value_type& x)
{
  this->value_.set (x);
}

void entry::
value (::std::unique_ptr< value_type > x)
{
  this->value_.set (std::move (x));
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// constant_t
//

constant_t::
constant_t (const type_type& type,
            const value_type& value)
: ::xml_schema::type (),
  type_ (type, this),
  value_ (value, this)
{
}

constant_t::
constant_t (const constant_t& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  type_ (x.type_, f, this),
  value_ (x.value_, f, this)
{
}

constant_t::
constant_t (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  type_ (this),
  value_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void constant_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // type
    //
    if (n.name () == "type" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< type_type > r (
        type_traits::create (i, f, this));

      if (!type_.present ())
      {
        this->type_.set (::std::move (r));
        continue;
      }
    }

    // value
    //
    if (n.name () == "value" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< value_type > r (
        value_traits::create (i, f, this));

      if (!value_.present ())
      {
        this->value_.set (::std::move (r));
        continue;
      }
    }

    break;
  }

  if (!type_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "type",
      "");
  }

  if (!value_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "value",
      "");
  }
}

constant_t* constant_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class constant_t (*this, f, c);
}

constant_t& constant_t::
operator= (const constant_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->type_ = x.type_;
    this->value_ = x.value_;
  }

  return *this;
}

constant_t::
~constant_t ()
{
}

// condition_t
//

condition_t::
condition_t (const operator_type& operator_,
             const field_type& field,
             const constant_type& constant)
: ::xml_schema::type (),
  operator__ (operator_, this),
  field_ (field, this),
  constant_ (constant, this)
{
}

condition_t::
condition_t (const operator_type& operator_,
             const field_type& field,
             ::std::unique_ptr< constant_type > constant)
: ::xml_schema::type (),
  operator__ (operator_, this),
  field_ (field, this),
  constant_ (std::move (constant), this)
{
}

condition_t::
condition_t (const condition_t& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  operator__ (x.operator__, f, this),
  field_ (x.field_, f, this),
  constant_ (x.constant_, f, this)
{
}

condition_t::
condition_t (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  operator__ (this),
  field_ (this),
  constant_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void condition_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // operator
    //
    if (n.name () == "operator" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< operator_type > r (
        operator_traits::create (i, f, this));

      if (!operator__.present ())
      {
        this->operator__.set (::std::move (r));
        continue;
      }
    }

    // field
    //
    if (n.name () == "field" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< field_type > r (
        field_traits::create (i, f, this));

      if (!field_.present ())
      {
        this->field_.set (::std::move (r));
        continue;
      }
    }

    // constant
    //
    if (n.name () == "constant" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< constant_type > r (
        constant_traits::create (i, f, this));

      if (!constant_.present ())
      {
        this->constant_.set (::std::move (r));
        continue;
      }
    }

    break;
  }

  if (!operator__.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "operator",
      "");
  }

  if (!field_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "field",
      "");
  }

  if (!constant_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "constant",
      "");
  }
}

condition_t* condition_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class condition_t (*this, f, c);
}

condition_t& condition_t::
operator= (const condition_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->operator__ = x.operator__;
    this->field_ = x.field_;
    this->constant_ = x.constant_;
  }

  return *this;
}

condition_t::
~condition_t ()
{
}

// predicate_t
//

predicate_t::
predicate_t ()
: ::xml_schema::type (),
  condition_ (this)
{
}

predicate_t::
predicate_t (const predicate_t& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  condition_ (x.condition_, f, this)
{
}

predicate_t::
predicate_t (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  condition_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void predicate_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // condition
    //
    if (n.name () == "condition" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< condition_type > r (
        condition_traits::create (i, f, this));

      this->condition_.push_back (::std::move (r));
      continue;
    }

    break;
  }
}

predicate_t* predicate_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class predicate_t (*this, f, c);
}

predicate_t& predicate_t::
operator= (const predicate_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->condition_ = x.condition_;
  }

  return *this;
}

predicate_t::
~predicate_t ()
{
}

// ret_val_t
//

ret_val_t::
ret_val_t ()
: ::xml_schema::type (),
  constant_ (this),
  map_ (this)
{
}

ret_val_t::
ret_val_t (const ret_val_t& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  constant_ (x.constant_, f, this),
  map_ (x.map_, f, this)
{
}

ret_val_t::
ret_val_t (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  constant_ (this),
  map_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void ret_val_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // constant
    //
    if (n.name () == "constant" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< constant_type > r (
        constant_traits::create (i, f, this));

      if (!this->constant_)
      {
        this->constant_.set (::std::move (r));
        continue;
      }
    }

    // map
    //
    if (n.name () == "map" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< map_type > r (
        map_traits::create (i, f, this));

      if (!this->map_)
      {
        this->map_.set (::std::move (r));
        continue;
      }
    }

    break;
  }
}

ret_val_t* ret_val_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class ret_val_t (*this, f, c);
}

ret_val_t& ret_val_t::
operator= (const ret_val_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->constant_ = x.constant_;
    this->map_ = x.map_;
  }

  return *this;
}

ret_val_t::
~ret_val_t ()
{
}

// select_t
//

select_t::
select_t ()
: ::xml_schema::type (),
  table_ (this),
  predicate_ (this)
{
}

select_t::
select_t (const select_t& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  table_ (x.table_, f, this),
  predicate_ (x.predicate_, f, this)
{
}

select_t::
select_t (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  table_ (this),
  predicate_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void select_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // table
    //
    if (n.name () == "table" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< table_type > r (
        table_traits::create (i, f, this));

      this->table_.push_back (::std::move (r));
      continue;
    }

    // predicate
    //
    if (n.name () == "predicate" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< predicate_type > r (
        predicate_traits::create (i, f, this));

      if (!this->predicate_)
      {
        this->predicate_.set (::std::move (r));
        continue;
      }
    }

    break;
  }
}

select_t* select_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class select_t (*this, f, c);
}

select_t& select_t::
operator= (const select_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->table_ = x.table_;
    this->predicate_ = x.predicate_;
  }

  return *this;
}

select_t::
~select_t ()
{
}

// map_t
//

map_t::
map_t ()
: ::xml_schema::type (),
  entry_ (this)
{
}

map_t::
map_t (const map_t& x,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  entry_ (x.entry_, f, this)
{
}

map_t::
map_t (const ::xercesc::DOMElement& e,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  entry_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void map_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // entry
    //
    if (n.name () == "entry" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< entry_type > r (
        entry_traits::create (i, f, this));

      this->entry_.push_back (::std::move (r));
      continue;
    }

    break;
  }
}

map_t* map_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class map_t (*this, f, c);
}

map_t& map_t::
operator= (const map_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->entry_ = x.entry_;
  }

  return *this;
}

map_t::
~map_t ()
{
}

// insert_t
//

insert_t::
insert_t (const into_type& into,
          const values_type& values)
: ::xml_schema::type (),
  into_ (into, this),
  values_ (values, this)
{
}

insert_t::
insert_t (const into_type& into,
          ::std::unique_ptr< values_type > values)
: ::xml_schema::type (),
  into_ (into, this),
  values_ (std::move (values), this)
{
}

insert_t::
insert_t (const insert_t& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  into_ (x.into_, f, this),
  values_ (x.values_, f, this)
{
}

insert_t::
insert_t (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  into_ (this),
  values_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void insert_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // into
    //
    if (n.name () == "into" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< into_type > r (
        into_traits::create (i, f, this));

      if (!into_.present ())
      {
        this->into_.set (::std::move (r));
        continue;
      }
    }

    // values
    //
    if (n.name () == "values" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< values_type > r (
        values_traits::create (i, f, this));

      if (!values_.present ())
      {
        this->values_.set (::std::move (r));
        continue;
      }
    }

    break;
  }

  if (!into_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "into",
      "");
  }

  if (!values_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "values",
      "");
  }
}

insert_t* insert_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class insert_t (*this, f, c);
}

insert_t& insert_t::
operator= (const insert_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->into_ = x.into_;
    this->values_ = x.values_;
  }

  return *this;
}

insert_t::
~insert_t ()
{
}

// delete_t
//

delete_t::
delete_t (const from_type& from)
: ::xml_schema::type (),
  from_ (from, this),
  predicate_ (this)
{
}

delete_t::
delete_t (const delete_t& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  from_ (x.from_, f, this),
  predicate_ (x.predicate_, f, this)
{
}

delete_t::
delete_t (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  from_ (this),
  predicate_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void delete_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // from
    //
    if (n.name () == "from" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< from_type > r (
        from_traits::create (i, f, this));

      if (!from_.present ())
      {
        this->from_.set (::std::move (r));
        continue;
      }
    }

    // predicate
    //
    if (n.name () == "predicate" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< predicate_type > r (
        predicate_traits::create (i, f, this));

      if (!this->predicate_)
      {
        this->predicate_.set (::std::move (r));
        continue;
      }
    }

    break;
  }

  if (!from_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "from",
      "");
  }
}

delete_t* delete_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class delete_t (*this, f, c);
}

delete_t& delete_t::
operator= (const delete_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->from_ = x.from_;
    this->predicate_ = x.predicate_;
  }

  return *this;
}

delete_t::
~delete_t ()
{
}

// update_t
//

update_t::
update_t (const table_type& table,
          const fields_type& fields)
: ::xml_schema::type (),
  table_ (table, this),
  fields_ (fields, this),
  predicate_ (this)
{
}

update_t::
update_t (const table_type& table,
          ::std::unique_ptr< fields_type > fields)
: ::xml_schema::type (),
  table_ (table, this),
  fields_ (std::move (fields), this),
  predicate_ (this)
{
}

update_t::
update_t (const update_t& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  table_ (x.table_, f, this),
  fields_ (x.fields_, f, this),
  predicate_ (x.predicate_, f, this)
{
}

update_t::
update_t (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  table_ (this),
  fields_ (this),
  predicate_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void update_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // table
    //
    if (n.name () == "table" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< table_type > r (
        table_traits::create (i, f, this));

      if (!table_.present ())
      {
        this->table_.set (::std::move (r));
        continue;
      }
    }

    // fields
    //
    if (n.name () == "fields" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< fields_type > r (
        fields_traits::create (i, f, this));

      if (!fields_.present ())
      {
        this->fields_.set (::std::move (r));
        continue;
      }
    }

    // predicate
    //
    if (n.name () == "predicate" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< predicate_type > r (
        predicate_traits::create (i, f, this));

      if (!this->predicate_)
      {
        this->predicate_.set (::std::move (r));
        continue;
      }
    }

    break;
  }

  if (!table_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "table",
      "");
  }

  if (!fields_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "fields",
      "");
  }
}

update_t* update_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class update_t (*this, f, c);
}

update_t& update_t::
operator= (const update_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->table_ = x.table_;
    this->fields_ = x.fields_;
    this->predicate_ = x.predicate_;
  }

  return *this;
}

update_t::
~update_t ()
{
}

// create_t
//

create_t::
create_t (const table_type& table,
          const fields_type& fields)
: ::xml_schema::type (),
  table_ (table, this),
  fields_ (fields, this)
{
}

create_t::
create_t (const table_type& table,
          ::std::unique_ptr< fields_type > fields)
: ::xml_schema::type (),
  table_ (table, this),
  fields_ (std::move (fields), this)
{
}

create_t::
create_t (const create_t& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  table_ (x.table_, f, this),
  fields_ (x.fields_, f, this)
{
}

create_t::
create_t (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  table_ (this),
  fields_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void create_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // table
    //
    if (n.name () == "table" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< table_type > r (
        table_traits::create (i, f, this));

      if (!table_.present ())
      {
        this->table_.set (::std::move (r));
        continue;
      }
    }

    // fields
    //
    if (n.name () == "fields" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< fields_type > r (
        fields_traits::create (i, f, this));

      if (!fields_.present ())
      {
        this->fields_.set (::std::move (r));
        continue;
      }
    }

    break;
  }

  if (!table_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "table",
      "");
  }

  if (!fields_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "fields",
      "");
  }
}

create_t* create_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class create_t (*this, f, c);
}

create_t& create_t::
operator= (const create_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->table_ = x.table_;
    this->fields_ = x.fields_;
  }

  return *this;
}

create_t::
~create_t ()
{
}

// drop_t
//

drop_t::
drop_t (const table_type& table)
: ::xml_schema::type (),
  table_ (table, this)
{
}

drop_t::
drop_t (const drop_t& x,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  table_ (x.table_, f, this)
{
}

drop_t::
drop_t (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  table_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void drop_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // table
    //
    if (n.name () == "table" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< table_type > r (
        table_traits::create (i, f, this));

      if (!table_.present ())
      {
        this->table_.set (::std::move (r));
        continue;
      }
    }

    break;
  }

  if (!table_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "table",
      "");
  }
}

drop_t* drop_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class drop_t (*this, f, c);
}

drop_t& drop_t::
operator= (const drop_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->table_ = x.table_;
  }

  return *this;
}

drop_t::
~drop_t ()
{
}

// request_t
//

request_t::
request_t (const type_type& type)
: ::xml_schema::type (),
  type_ (type, this),
  select_ (this),
  delete__ (this),
  insert_ (this),
  create_ (this),
  update_ (this),
  drop_ (this)
{
}

request_t::
request_t (const request_t& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  type_ (x.type_, f, this),
  select_ (x.select_, f, this),
  delete__ (x.delete__, f, this),
  insert_ (x.insert_, f, this),
  create_ (x.create_, f, this),
  update_ (x.update_, f, this),
  drop_ (x.drop_, f, this)
{
}

request_t::
request_t (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  type_ (this),
  select_ (this),
  delete__ (this),
  insert_ (this),
  create_ (this),
  update_ (this),
  drop_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void request_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // type
    //
    if (n.name () == "type" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< type_type > r (
        type_traits::create (i, f, this));

      if (!type_.present ())
      {
        this->type_.set (::std::move (r));
        continue;
      }
    }

    // select
    //
    if (n.name () == "select" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< select_type > r (
        select_traits::create (i, f, this));

      if (!this->select_)
      {
        this->select_.set (::std::move (r));
        continue;
      }
    }

    // delete
    //
    if (n.name () == "delete" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< delete_type > r (
        delete_traits::create (i, f, this));

      if (!this->delete__)
      {
        this->delete__.set (::std::move (r));
        continue;
      }
    }

    // insert
    //
    if (n.name () == "insert" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< insert_type > r (
        insert_traits::create (i, f, this));

      if (!this->insert_)
      {
        this->insert_.set (::std::move (r));
        continue;
      }
    }

    // create
    //
    if (n.name () == "create" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< create_type > r (
        create_traits::create (i, f, this));

      if (!this->create_)
      {
        this->create_.set (::std::move (r));
        continue;
      }
    }

    // update
    //
    if (n.name () == "update" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< update_type > r (
        update_traits::create (i, f, this));

      if (!this->update_)
      {
        this->update_.set (::std::move (r));
        continue;
      }
    }

    // drop
    //
    if (n.name () == "drop" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< drop_type > r (
        drop_traits::create (i, f, this));

      if (!this->drop_)
      {
        this->drop_.set (::std::move (r));
        continue;
      }
    }

    break;
  }

  if (!type_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "type",
      "");
  }
}

request_t* request_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class request_t (*this, f, c);
}

request_t& request_t::
operator= (const request_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->type_ = x.type_;
    this->select_ = x.select_;
    this->delete__ = x.delete__;
    this->insert_ = x.insert_;
    this->create_ = x.create_;
    this->update_ = x.update_;
    this->drop_ = x.drop_;
  }

  return *this;
}

request_t::
~request_t ()
{
}

// message_t
//

message_t::
message_t (const connect_type& connect)
: ::xml_schema::type (),
  connect_ (connect, this),
  database_ (this),
  request_ (this)
{
}

message_t::
message_t (const message_t& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  connect_ (x.connect_, f, this),
  database_ (x.database_, f, this),
  request_ (x.request_, f, this)
{
}

message_t::
message_t (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  connect_ (this),
  database_ (this),
  request_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void message_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // connect
    //
    if (n.name () == "connect" && n.namespace_ ().empty ())
    {
      if (!connect_.present ())
      {
        this->connect_.set (connect_traits::create (i, f, this));
        continue;
      }
    }

    // database
    //
    if (n.name () == "database" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< database_type > r (
        database_traits::create (i, f, this));

      if (!this->database_)
      {
        this->database_.set (::std::move (r));
        continue;
      }
    }

    // request
    //
    if (n.name () == "request" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< request_type > r (
        request_traits::create (i, f, this));

      if (!this->request_)
      {
        this->request_.set (::std::move (r));
        continue;
      }
    }

    break;
  }

  if (!connect_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "connect",
      "");
  }
}

message_t* message_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class message_t (*this, f, c);
}

message_t& message_t::
operator= (const message_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->connect_ = x.connect_;
    this->database_ = x.database_;
    this->request_ = x.request_;
  }

  return *this;
}

message_t::
~message_t ()
{
}

// entry
//

entry::
entry (const key_type& key,
       const value_type& value)
: ::xml_schema::type (),
  key_ (key, this),
  value_ (value, this)
{
}

entry::
entry (const key_type& key,
       ::std::unique_ptr< value_type > value)
: ::xml_schema::type (),
  key_ (key, this),
  value_ (std::move (value), this)
{
}

entry::
entry (const entry& x,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  key_ (x.key_, f, this),
  value_ (x.value_, f, this)
{
}

entry::
entry (const ::xercesc::DOMElement& e,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  key_ (this),
  value_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void entry::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // key
    //
    if (n.name () == "key" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< key_type > r (
        key_traits::create (i, f, this));

      if (!key_.present ())
      {
        this->key_.set (::std::move (r));
        continue;
      }
    }

    // value
    //
    if (n.name () == "value" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< value_type > r (
        value_traits::create (i, f, this));

      if (!value_.present ())
      {
        this->value_.set (::std::move (r));
        continue;
      }
    }

    break;
  }

  if (!key_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "key",
      "");
  }

  if (!value_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "value",
      "");
  }
}

entry* entry::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class entry (*this, f, c);
}

entry& entry::
operator= (const entry& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->key_ = x.key_;
    this->value_ = x.value_;
  }

  return *this;
}

entry::
~entry ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::unique_ptr< ::message_t >
message (const ::std::string& u,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::message_t > (
    ::message (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::message_t >
message (const ::std::string& u,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::message_t > (
    ::message (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::message_t >
message (const ::std::string& u,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::message_t > (
    ::message (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::message_t >
message (::std::istream& is,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::message (isrc, f, p);
}

::std::unique_ptr< ::message_t >
message (::std::istream& is,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::message (isrc, h, f, p);
}

::std::unique_ptr< ::message_t >
message (::std::istream& is,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::message (isrc, h, f, p);
}

::std::unique_ptr< ::message_t >
message (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::message (isrc, f, p);
}

::std::unique_ptr< ::message_t >
message (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::message (isrc, h, f, p);
}

::std::unique_ptr< ::message_t >
message (::std::istream& is,
         const ::std::string& sid,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::message (isrc, h, f, p);
}

::std::unique_ptr< ::message_t >
message (::xercesc::InputSource& i,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::message_t > (
    ::message (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::message_t >
message (::xercesc::InputSource& i,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::message_t > (
    ::message (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::message_t >
message (::xercesc::InputSource& i,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::message_t > (
    ::message (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::message_t >
message (const ::xercesc::DOMDocument& doc,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::unique_ptr< ::message_t > (
      ::message (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "message" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::message_t > r (
      ::xsd::cxx::tree::traits< ::message_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "message",
    "");
}

::std::unique_ptr< ::message_t >
message (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
         ::xml_schema::flags f,
         const ::xml_schema::properties&)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "message" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::message_t > r (
      ::xsd::cxx::tree::traits< ::message_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "message",
    "");
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

void
operator<< (::xercesc::DOMElement& e, const constant_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // type
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "type",
        e));

    s << i.type ();
  }

  // value
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "value",
        e));

    s << i.value ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const condition_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // operator
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "operator",
        e));

    s << i.operator_ ();
  }

  // field
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "field",
        e));

    s << i.field ();
  }

  // constant
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "constant",
        e));

    s << i.constant ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const predicate_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // condition
  //
  for (predicate_t::condition_const_iterator
       b (i.condition ().begin ()), n (i.condition ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "condition",
        e));

    s << *b;
  }
}

void
operator<< (::xercesc::DOMElement& e, const ret_val_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // constant
  //
  if (i.constant ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "constant",
        e));

    s << *i.constant ();
  }

  // map
  //
  if (i.map ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "map",
        e));

    s << *i.map ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const select_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // table
  //
  for (select_t::table_const_iterator
       b (i.table ().begin ()), n (i.table ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "table",
        e));

    s << *b;
  }

  // predicate
  //
  if (i.predicate ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "predicate",
        e));

    s << *i.predicate ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const map_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // entry
  //
  for (map_t::entry_const_iterator
       b (i.entry ().begin ()), n (i.entry ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "entry",
        e));

    s << *b;
  }
}

void
operator<< (::xercesc::DOMElement& e, const insert_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // into
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "into",
        e));

    s << i.into ();
  }

  // values
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "values",
        e));

    s << i.values ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const delete_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // from
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "from",
        e));

    s << i.from ();
  }

  // predicate
  //
  if (i.predicate ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "predicate",
        e));

    s << *i.predicate ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const update_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // table
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "table",
        e));

    s << i.table ();
  }

  // fields
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "fields",
        e));

    s << i.fields ();
  }

  // predicate
  //
  if (i.predicate ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "predicate",
        e));

    s << *i.predicate ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const create_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // table
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "table",
        e));

    s << i.table ();
  }

  // fields
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "fields",
        e));

    s << i.fields ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const drop_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // table
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "table",
        e));

    s << i.table ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const request_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // type
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "type",
        e));

    s << i.type ();
  }

  // select
  //
  if (i.select ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "select",
        e));

    s << *i.select ();
  }

  // delete
  //
  if (i.delete_ ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "delete",
        e));

    s << *i.delete_ ();
  }

  // insert
  //
  if (i.insert ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "insert",
        e));

    s << *i.insert ();
  }

  // create
  //
  if (i.create ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "create",
        e));

    s << *i.create ();
  }

  // update
  //
  if (i.update ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "update",
        e));

    s << *i.update ();
  }

  // drop
  //
  if (i.drop ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "drop",
        e));

    s << *i.drop ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const message_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // connect
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "connect",
        e));

    s << i.connect ();
  }

  // database
  //
  if (i.database ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "database",
        e));

    s << *i.database ();
  }

  // request
  //
  if (i.request ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "request",
        e));

    s << *i.request ();
  }
}

void
message (::std::ostream& o,
         const ::message_t& s,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::message (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
message (::std::ostream& o,
         const ::message_t& s,
         ::xml_schema::error_handler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::message (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
message (::std::ostream& o,
         const ::message_t& s,
         ::xercesc::DOMErrorHandler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::message (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
message (::xercesc::XMLFormatTarget& t,
         const ::message_t& s,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::message (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
message (::xercesc::XMLFormatTarget& t,
         const ::message_t& s,
         ::xml_schema::error_handler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::message (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
message (::xercesc::XMLFormatTarget& t,
         const ::message_t& s,
         ::xercesc::DOMErrorHandler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::message (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
message (::xercesc::DOMDocument& d,
         const ::message_t& s,
         ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "message" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "message",
      "");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
message (const ::message_t& s,
         const ::xml_schema::namespace_infomap& m,
         ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "message",
      "",
      m, f));

  ::message (*d, s, f);
  return d;
}

void
operator<< (::xercesc::DOMElement& e, const entry& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // key
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "key",
        e));

    s << i.key ();
  }

  // value
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "value",
        e));

    s << i.value ();
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

